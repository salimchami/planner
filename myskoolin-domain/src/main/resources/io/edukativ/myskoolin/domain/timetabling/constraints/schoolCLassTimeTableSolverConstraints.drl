package io.edukativ.myskoolin.domain.timetabling.constraints;
    dialect "java"

import io.edukativ.myskoolin.domain.timetabling.Lesson;
import io.edukativ.myskoolin.domain.timetabling.TimeSlot;
import io.edukativ.myskoolin.domain.timetabling.SchoolClassTimeTable;
import io.edukativ.myskoolin.domain.subjects.Subject;
import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;
import java.util.List
import org.apache.commons.math3.stat.descriptive.summary.Product;

global HardMediumSoftScoreHolder scoreHolder;

//----------------------------------------------------------------------------------------------------------

rule "Time slot overlapping another time slot"
    when
        $timeslot1: TimeSlot()
        $lesson : Lesson($timeslot2: timeSlot, $timeslot2 != $timeslot1, $timeslot1.isOverlapping($timeslot2))
    then
        scoreHolder.penalize(kcontext, $timeslot1.overlappingPenalty($timeslot2));
end

//----------------------------------------------------------------------------------------------------------

rule "School room right type"
    when
        $lesson: Lesson(!hasRightSchoolRoomType())
    then
        scoreHolder.penalize(kcontext, $lesson.wrongSchoolRoomTypePenalty());
end

//----------------------------------------------------------------------------------------------------------

rule "Subject duration max by day"
    when
        $lesson : Lesson($timeslot1: timeSlot, $subject1: subject)
        not(Lesson($timeslot1.equals(timeSlot)))
        $duplicates: List() from collect( Lesson( subject == $subject1 ) )
        $total : Integer() from
         accumulate ( Lesson($timeslot2: timeSlot, $subject2: subject, $subject2.equals($subject1), $timeslot1.day == $timeslot2.day),
                init( int total =0;),
                action(total+=($timeslot2.durationInMinutes());),
                result( new Integer (total)))
    then
        scoreHolder.penalize(kcontext, $lesson.getSubject().maxMinutesPerDayPenalty($total.intValue()) / $duplicates.size());
end
