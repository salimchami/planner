"use strict";
exports.__esModule = true;
var responsible_model_1 = require("./responsible.model");
var canteen_registration_model_1 = require("./sub/canteen.registration.model");
var medical_infos_model_1 = require("./sub/medical.infos.model");
var schooling_infos_model_1 = require("./sub/schooling.infos.model");
var address_model_1 = require("./sub/address.model");
var residential_school_model_1 = require("./sub/residential.school.model");
var Student = /** @class */ (function () {
    function Student(id, login, clientId, firstName, lastName, sex, birthDate, nationality, homePhone, cellPhone, email, imageUrl, address, langKey, infirmaryStatistics, responsibles, responsibleAccountLogin, comment, canteenRegistration, medicalInfos, schoolingInfos, residentialSchool, timetable, dailyBook, continuousAssessment, schoolClass, sanctions, delays, reports) {
        this.id = id;
        this.login = login;
        this.clientId = clientId;
        this.firstName = firstName;
        this.lastName = lastName;
        this.sex = sex;
        this.birthDate = birthDate;
        this.nationality = nationality;
        this.homePhone = homePhone;
        this.cellPhone = cellPhone;
        this.email = email;
        this.imageUrl = imageUrl;
        this.address = address;
        this.langKey = langKey;
        this.infirmaryStatistics = infirmaryStatistics;
        this.responsibles = responsibles;
        this.responsibleAccountLogin = responsibleAccountLogin;
        this.comment = comment;
        this.canteenRegistration = canteenRegistration;
        this.medicalInfos = medicalInfos;
        this.schoolingInfos = schoolingInfos;
        this.residentialSchool = residentialSchool;
        this.timetable = timetable;
        this.dailyBook = dailyBook;
        this.continuousAssessment = continuousAssessment;
        this.schoolClass = schoolClass;
        this.sanctions = sanctions;
        this.delays = delays;
        this.reports = reports;
        this.address = new address_model_1.Address();
        this.residentialSchool = new residential_school_model_1.ResidentialSchool();
        this.residentialSchool.registered = false;
        this.schoolingInfos = new schooling_infos_model_1.SchoolingInfos();
        this.schoolingInfos.redoubling = false;
        this.schoolingInfos.personalizedSchoolingPlan = false;
        this.schoolingInfos.individualizedReceptionPlan = false;
        this.responsibles = [new responsible_model_1.Responsible(true)];
        this.medicalInfos = new medical_infos_model_1.MedicalInfos();
        this.medicalInfos.healthInsurance = false;
        this.medicalInfos.complementaryHealthInsurance = false;
        this.medicalInfos.allergies = '';
        this.medicalInfos.healthComment = '';
        this.medicalInfos.knownDiseases = '';
        this.canteenRegistration = new canteen_registration_model_1.CanteenRegistration(false, false, false, false, []);
    }
    Student.prototype.update = function (studentUserForm, studentScholarInfosForm, studentResponsibleAccountForm, studentResponsiblesForm, studentMedicalInfosForm, studentCanteenForm, studentResidentialSchoolForm, currentLang) {
        var _this = this;
        if (!this.langKey) {
            this.langKey = currentLang;
        }
        this.login = studentUserForm.controls.login.value;
        this.firstName = studentUserForm.controls.firstName.value;
        this.lastName = studentUserForm.controls.lastName.value;
        this.sex = studentUserForm.controls.sex.value;
        this.nationality = studentUserForm.controls.nationality.value;
        this.email = studentUserForm.controls.email.value;
        var birthDate = studentUserForm.controls.birthDate.value;
        this.birthDate = new Date(birthDate.year, birthDate.month, birthDate.day);
        this.cellPhone = studentUserForm.controls.cellPhone.value;
        this.homePhone = studentUserForm.controls.homePhone.value;
        this.address.name = studentUserForm.controls.addressName.value;
        this.address.postalCode = studentUserForm.controls.postalCode.value;
        this.address.city = studentUserForm.controls.city.value;
        this.address.country = studentUserForm.controls.country.value;
        this.comment = studentUserForm.controls.comment.value;
        this.schoolingInfos.nationalNumber = studentScholarInfosForm.controls.nationalNumber.value;
        this.schoolingInfos.redoubling = studentScholarInfosForm.controls.redoubling.value;
        var entryDate = studentScholarInfosForm.controls.entryDate.value;
        this.schoolingInfos.entryDate = new Date(entryDate.year, entryDate.month, entryDate.day);
        this.schoolingInfos.originEstablishment = studentScholarInfosForm.controls.originEstablishment.value;
        this.schoolingInfos.individualizedReceptionPlan = studentScholarInfosForm.controls.individualizedReceptionPlan.value;
        this.schoolingInfos.individualizedReceptionPlanContent = studentScholarInfosForm.controls.individualizedReceptionPlanContent.value;
        this.schoolingInfos.personalizedSchoolingPlan = studentScholarInfosForm.controls.personalizedSchoolingPlan.value;
        this.schoolingInfos.personalizedSchoolingPlanContent = studentScholarInfosForm.controls.personalizedSchoolingPlanContent.value;
        if (studentScholarInfosForm.controls.exitDate.value) {
            var exitDate = studentScholarInfosForm.controls.exitDate.value;
            this.schoolingInfos.exitDate = new Date(exitDate.year, exitDate.month, exitDate.day);
            this.schoolingInfos.exitReason = studentScholarInfosForm.controls.exitReason.value;
        }
        this.medicalInfos.allergies = studentMedicalInfosForm.controls.allergies.value;
        this.medicalInfos.knownDiseases = studentMedicalInfosForm.controls.knownDiseases.value;
        this.medicalInfos.healthInsurance = studentMedicalInfosForm.controls.healthInsurance.value;
        this.medicalInfos.healthInsuranceName = studentMedicalInfosForm.controls.healthInsuranceName.value;
        this.medicalInfos.healthInsuranceReference = studentMedicalInfosForm.controls.healthInsuranceReference.value;
        this.medicalInfos.healthInsuranceContact = studentMedicalInfosForm.controls.healthInsuranceContact.value;
        this.medicalInfos.complementaryHealthInsurance = studentMedicalInfosForm.controls.complementaryHealthInsurance.value;
        this.medicalInfos.complementaryHealthInsuranceName = studentMedicalInfosForm.controls.complementaryHealthInsuranceName.value;
        this.medicalInfos.complementaryHealthInsuranceReference = studentMedicalInfosForm.controls.complementaryHealthInsuranceReference.value;
        this.medicalInfos.complementaryHealthInsuranceContact = studentMedicalInfosForm.controls.complementaryHealthInsuranceContact.value;
        this.medicalInfos.healthComment = studentMedicalInfosForm.controls.healthComment.value;
        this.responsibleAccountLogin = studentResponsibleAccountForm.controls.respLogin.value;
        studentResponsiblesForm.controls.responsibles.value.forEach(function (responsibleForm, index) {
            _this.responsibles[index] = new responsible_model_1.Responsible(responsibleForm.respAccount);
            _this.responsibles[index].firstName = responsibleForm.firstName;
            _this.responsibles[index].lastName = responsibleForm.lastName;
            _this.responsibles[index].sex = responsibleForm.sex;
            var respBirthDate = responsibleForm.birthDate;
            _this.responsibles[index].birthdate = new Date(respBirthDate.year, respBirthDate.month, respBirthDate.day);
            _this.responsibles[index].address.name = responsibleForm.addressName;
            _this.responsibles[index].nationality = responsibleForm.nationality;
            _this.responsibles[index].address.postalCode = responsibleForm.postalCode;
            _this.responsibles[index].address.city = responsibleForm.city;
            _this.responsibles[index].address.country = responsibleForm.country;
            _this.responsibles[index].phone = responsibleForm.phone;
            _this.responsibles[index].cellPhone = responsibleForm.cellPhone;
            _this.responsibles[index].workPhone = responsibleForm.workPhone;
            _this.responsibles[index].email = responsibleForm.email;
            _this.responsibles[index].secondaryEmail = responsibleForm.secondaryEmail;
            _this.responsibles[index].familySituation = responsibleForm.familySituation;
            _this.responsibles[index].studentRelationship = responsibleForm.studentRelationship;
            _this.responsibles[index].dependentChildren = responsibleForm.dependentChildren;
            _this.responsibles[index].profession = responsibleForm.profession;
            _this.responsibles[index].proEmail = responsibleForm.proEmail;
            _this.responsibles[index].workCellPhone = responsibleForm.workCellPhone;
            _this.responsibles[index].parentsAssociation = responsibleForm.parentsAssociation;
            _this.responsibles[index].parentsAssociationPosition = responsibleForm.parentsAssociationPosition;
            _this.responsibles[index].comment = responsibleForm.comment;
        });
        this.canteenRegistration.recorded = studentCanteenForm.controls.recorded.value;
        this.canteenRegistration.breakfast = studentCanteenForm.controls.breakfast.value;
        this.canteenRegistration.lunch = studentCanteenForm.controls.lunch.value;
        this.canteenRegistration.dinner = studentCanteenForm.controls.dinner.value;
        this.canteenRegistration.weekDays = studentCanteenForm.controls.weekDays.value;
        var subscriptionPeriodStart = studentCanteenForm.controls.subscriptionPeriodStart.value;
        var subscriptionPeriodEnd = studentCanteenForm.controls.subscriptionPeriodEnd.value;
        this.canteenRegistration.subscriptionPeriodStart = new Date(subscriptionPeriodStart.year, subscriptionPeriodStart.month, subscriptionPeriodStart.day);
        this.canteenRegistration.subscriptionPeriodEnd = new Date(subscriptionPeriodEnd.year, subscriptionPeriodEnd.month, subscriptionPeriodEnd.day);
        this.residentialSchool.registered = studentResidentialSchoolForm.controls.registered.value;
        this.residentialSchool.name = studentResidentialSchoolForm.controls.name.value;
        var periodStart = studentResidentialSchoolForm.controls.periodStart.value;
        var periodEnd = studentResidentialSchoolForm.controls.periodEnd.value;
        this.residentialSchool.periodStart = new Date(periodStart.year, periodStart.month, periodStart.day);
        this.residentialSchool.periodEnd = new Date(periodEnd.year, periodEnd.month, periodEnd.day);
    };
    return Student;
}());
exports.Student = Student;
//# sourceMappingURL=student.model.js.map